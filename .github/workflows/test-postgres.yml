name: Tests with PostgreSQL

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15  # Puedes usar postgres:16 o postgres:14 según necesites
        env:
          POSTGRES_USER: ${{ vars.POSTGRES_USER || 'todo_user' }}
          POSTGRES_PASSWORD: ${{ vars.POSTGRES_PASSWORD || 'todo_pass' }}
          POSTGRES_DB: ${{ vars.POSTGRES_DB || 'todo_db' }}
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    # Aquí añades los pasos para configurar tu entorno de testing

    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install uv
        uv sync
    
  
    - name: Run migrations
      env:
        DATABASE_URL: postgresql://${{ vars.POSTGRES_USER || 'todo_user' }}:${{ vars.POSTGRES_PASSWORD || 'todo_pass' }}@localhost:5432/${{ vars.POSTGRES_DB || 'todo_db' }}
      run: |
        uv run alembic upgrade head
      
    - name: Run tests
      run: |
        uv run pytest ./backend/api/tests
      env:
        DATABASE_URL: postgresql://${{ vars.POSTGRES_USER || 'todo_user' }}:${{ vars.POSTGRES_PASSWORD || 'todo_pass' }}@localhost:5432/${{ vars.POSTGRES_DB || 'todo_db' }}
        # Asegúrate de que la variable de entorno DATABASE_URL coincide con la configuración de tu base de datos